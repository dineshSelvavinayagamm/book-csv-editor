{
  "root": true,
  "extends": [
    "next/core-web-vitals",
    "next/typescript",
    "plugin:@typescript-eslint/recommended",
    "plugin:prettier/recommended",
    "plugin:react-hooks/recommended",
    "eslint:recommended",
    "plugin:react/recommended",
    "plugin:import/typescript",
    "plugin:promise/recommended",
    "plugin:import/errors",
    "plugin:import/warnings",
    "plugin:import/typescript"
  ],
  "plugins": ["react-hooks", "prettier", "react", "spellcheck", "promise", "import"],
  "settings": {
    "react": {
      "createClass": "createReactClass", // Regex for Component Factory to use,
      // default to "createReactClass"
      "pragma": "React", // Pragma to use, default to "React"
      "fragment": "Fragment", // Fragment to use (may be a property of <pragma>), default to "Fragment"
      "version": "detect", // React version. "detect" automatically picks the version you have installed.
      // You can also use `16.0`, `16.3`, etc, if you want to override the detected value.
      // Defaults to the "defaultVersion" setting and warns if missing, and to "detect" in the future
      "defaultVersion": "", // Default React version to use when the version you have installed cannot be detected.
      // If not provided, defaults to the latest React version.
      "flowVersion": "0.53" // Flow version
    },
    "propWrapperFunctions": [
      // The names of any function used to wrap propTypes, e.g. `forbidExtraProps`. If this is not set, any propTypes wrapped in a function will be skipped.
      "forbidExtraProps",
      { "property": "freeze", "object": "Object" },
      { "property": "myFavoriteWrapper" },
      // for rules that check exact prop wrappers
      { "property": "forbidExtraProps", "exact": true }
    ],
    "componentWrapperFunctions": [
      // The name of any function used to wrap components, e.g. Mobx `observer` function. If this is not set, components wrapped by these functions will be skipped.
      "observer", // `property`
      { "property": "styled" }, // `object` is optional
      { "property": "observer", "object": "Mobx" },
      { "property": "observer", "object": "<pragma>" } // sets `object` to whatever value `settings.react.pragma` is set to
    ],
    "linkComponents": [
      // Components used as alternatives to <a> for linking, eg. <Link to={ url } />
      "Hyperlink",
      { "name": "MyLink", "linkAttribute": "to" },
      { "name": "Link", "linkAttribute": ["to", "href"] } // allows specifying multiple properties if necessary
    ]
  },
  "parser": "@typescript-eslint/parser",
  "rules": {
    "@typescript-eslint/no-explicit-any": "error",
    "@next/next/no-html-link-for-pages": ["error", "packages/my-app/pages/"],
    "react-hooks/rules-of-hooks": "error",
    "react-hooks/exhaustive-deps": "warn",
    "prettier/prettier": [
      "warn",
      {
        "singleQuote": true,
        "semi": true,
        "trailingComma": "all",
        "endOfLine": "auto"
      }
    ],
    "no-console": "warn",
    "no-async-promise-executor": "error",
    "no-await-in-loop": "error",
    "no-duplicate-case": "error",
    "no-duplicate-imports": "warn",
    "import/no-unresolved": "error",
    "no-empty-character-class": "error",
    "no-empty-pattern": "warn",
    "no-return-await": "warn",
    "no-promise-executor-return": "warn",
    "react/no-unescaped-entities": "warn",
    "require-await": "warn",
    "no-throw-literal": "off",
    "react/jsx-no-bind": [
      "error",
      { "ignoreDOMComponents": true, "allowArrowFunctions": false }
    ],
    "react/jsx-curly-spacing": "warn",
    "react/jsx-equals-spacing": "warn",
    "react/jsx-no-constructed-context-values": "warn",
    "react/jsx-no-useless-fragment": "warn",
    "react/jsx-props-no-spreading": [
      "warn",
      { "custom": "ignore", "explicitSpread": "enforce" }
    ],
    "react/self-closing-comp": [
      "error",
      {
        "component": true,
        "html": true
      }
    ],
    "react/function-component-definition": [
      "error",
      {
        "namedComponents": "arrow-function",
        "unnamedComponents": "arrow-function"
      }
    ],
    "react/jsx-pascal-case": [
      "error",
      {
        "allowAllCaps": true,
        "allowNamespace": true,
        "allowLeadingUnderscore": false,
        "ignore": []
      }
    ],
    "react/jsx-max-depth": ["error", { "max": 50 }],
    "react/jsx-filename-extension": [1, { "extensions": [".ts", ".tsx"] }],
    "react/jsx-handler-names": ["warn"],
    "react/jsx-key": "warn",
    "react/no-access-state-in-setstate": "warn",
    "react/no-deprecated": "warn",
    "react/no-multi-comp": "error",
    "react/boolean-prop-naming": ["error", { "rule": "^(is|has)[A-Z]([A-Za-z0-9]?)+" }],
    "@typescript-eslint/no-unused-vars": [
      "warn",
      {
        "args": "all",
        "argsIgnorePattern": "^_",
        "caughtErrors": "all",
        "caughtErrorsIgnorePattern": "^_",
        "destructuredArrayIgnorePattern": "^_",
        "varsIgnorePattern": "^_",
        "ignoreRestSiblings": true
      }
    ],
    "promise/always-return": "error",
    "promise/no-return-wrap": "error",
    "promise/param-names": "error",
    "promise/catch-or-return": "error",
    "promise/no-native": "off",
    "promise/no-nesting": "warn",
    "promise/no-promise-in-callback": "warn",
    "promise/no-callback-in-promise": "warn",
    "promise/avoid-new": "warn",
    "promise/no-new-statics": "error",
    "promise/no-return-in-finally": "warn",
    "promise/valid-params": "warn",
    "prefer-const": "error",
    "spellcheck/spell-checker": [
      2,
      {
        "comments": true,
        "strings": true,
        "identifiers": true,
        "templates": true,
        "lang": "en_US",
        "skipWords": [
          "geist",
          "woff",
          "pathname",
          "jsx",
          "tsx",
          "mdx",
          "antialiased",
          "Readonly"
        ],
        "skipIfMatch": ["http://[^s]*", "^[-\\w]+/[-\\w\\.]+$"],
        "skipWordIfMatch": ["^foobar.*$"],
        "minLength": 3
      }
    ]
  }
}
